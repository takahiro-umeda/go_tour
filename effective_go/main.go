package main

/*
進め方
読んでいって、気になるところは書く、気になるところは質問する
9/30 イントロダクション ~ データ(new)
10/7
*/

/*
気付いたこと
- フォーマッティング
  - ()が不要なところがある。制御構文とか。
- インタフェース名
  - 「独自の文字列変換メソッドを実装するなら、そのメソッド名はToStringではなく、Stringであるべき」
- 制御構文
  - `if err := file.Chmod(0664); err != nil {`の`err := file.Chmod(0664)`はforと同じく初期化文
- データ
  - classがないgoでもnewは使える。`p := new(SyncedBuffer);`とかやるとフィールドが初期化された構造体が出来上がる
  - make()はスライス、マップ、チャンネル専用
- インタフェース
  - 「Goコードでは、メソッドが1つまたは2つしかないインターフェースが一般的であり、通常、Writeを実装するもののio.Writerなど、メソッドから派生した名前が付けられます。」
- 並列処理
  - Goは異なるアプローチをとり、共有する値はチャンネル上でやりとりされ、実際スレッド間で活発に共有されることはありません。ある値へのアクセスはどんなときでもひとつのGoroutineしか持たず、設計上競合状態になることはありえません。このような考え方を奨励するため、次のスローガンにまとめました。
    「共有メモリを使って通信せず、通信によってメモリを共有せよ。」
  - ゴルーチンの非同期処理を待つイディオム
    - http://go.shibu.jp/effective_go.html#id28
- 言語設計FAQ
  - 例外がない。
*/
